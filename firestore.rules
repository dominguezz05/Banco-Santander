/**
 * @file Firestore Security Rules for a Banking Portal
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user accounts. Each user can only access their own account data.
 * @dataStructure All user data is stored under the /userAccounts/{userId} path, where {userId} corresponds to the authenticated user's UID.
 * @keySecurityDecisions User listing is disabled to prevent unauthorized enumeration of user accounts. Write access is strictly controlled, allowing only the authenticated user to create their own account and modify it.
 * @denormalizationForAuthorization N/A - Denormalization is not needed in this static demo.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user account information. Each user can only access their own account.
     * @path /userAccounts/{userId}
     * @allow (create) - Authenticated user creates their own account with matching UID.
     * @allow (get, update, delete) - Authenticated user accesses/modifies their own account.
     * @deny (create) - Authenticated user attempts to create an account with a mismatched UID.
     * @deny (get, update, delete) - Authenticated user attempts to access/modify another user's account.
     * @principle Enforces document ownership for all operations.
     */
    match /userAccounts/{userId} {
      //  functions
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      // Read Permissions
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all user accounts

      // Write Permissions
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}